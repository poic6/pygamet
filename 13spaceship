import pygame
import os
import sys
import random
import math
from time import sleep

SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600

BLACK = (0,0,0)
WHITE = (200,200,200)
YELLOW = (250,250,20)
BLUE = (20,20,250)

class Spaceship(pygame.sprite.Sprite):
    def __init__(self):
        super(Spaceship, self).__init__()
        spaceship_image_path = resource_path('assets/spaceship.png')
        explosion_image_path = resource_path('assets/explosion.png')
        explosion_sound_path = resource_path('assets/explosion.wav')
        self.image = pygame.image.load(spaceship_image_path)
        self.explosion_image = pygame.image.load(explosion_image_path)
        self.explosion_sound = pygame.mixer.Sound(explosion_sound_path)
        self.rect = self.image.get_rect()
        self.centerx = self.rect.centerx
        self.centery = self.rect.centery
    def set_pos(self, x, y):
        self.rect.x = x-self.centerx
        self.rect.y = y-self.centery
    def collide(self, sprites):
        for sprite in sprites:
            if pygame.sprite.collide_rect(self, sprite):
                return sprite
    def occur_explosion(self, screen):
        explosion_rect = self.explosion_image.get_rect()
        explosion_rect.x = self.rect.x
        explosion_rect.y = self.rect.y
        screen.blit(self.explosion_image, explosion_rect)
        pygame.display.update()
        self.explosion_sound.play()

class Rock(pygame.sprite.Sprite):
    def __init__(self, xpos, ypos, hspeed, vspeed):
        super(Rock, self).__init__()
        rock_images_path = resource_path('assets/rock')
        image_file_list = os.listdir(rock_images_path)
        self.image_path_list = [os.path.join(rock_images_path, file) for file in image_file_list if file.endswith(".png")]
        choice_rock_path = random.choice(self.image_path_list)
        self.image = pygame.image.load(choice_rock_path)
        self.rect = self.image.get_rect()
        self.rect.x = xpos
        self.rect.y = ypos
        self.hspeed = hspeed
        self.vspeed = vspeed
        self.set_direction()

    def set_direction(self):
        if self.hspeed>0:
            self.image = pygame.transform.rotate(self.image, 270)
        elif self.hspeed<0:
            self.image = pygame.transform.rotate(self.image, 90)
        elif self.vspeed>0:
            self.image = pygame.transform.ratate(self.image, 180)

    def update(self):
        self.rect.x += self.hspeed
        self.rect.y += self.vspeed

class Wrap(pygame.sptite.Sprite):
    def __init__(self, x, y):
        super(Wrap, self).__init__()
        self.image = pygame.image.load(resource_path('assets/wrap.png'))
        self.rect = self.image.get_rect()
        self.rect.x = x-self.rect.centerx
        self.rect.y = y-self.rect.centery

class Game():
    def __init__(self):
        self.menu_image = pygame.image.load(resource_path('assets/game_screen.png'))
        self.background_img = pygame.image.load(resource_path('assets/background.jpg'))
        self.font = pygame.font.SysFont("맑은 고딕", 20)
        self.wrap_sound = pygame.mixer.Sound(resource_path('assets/wrap.wav'))
        pygame.mixer.music.load(resource_path('assets/Inner_Sanctum.mp3'))

        self.spaceship = Spaceship()
        self.rocks = pygame.sprite.Group()
        self.wrpas = pygame.sprite.Group()

        self.occur_prob = 15
        self.score = 0
        self.wrap_count = 1

        self.menu_on = True
    
    def process_events(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                return False
        if self.menu_on:
            if event.type == pygame.MOUSEBUTTONDOWN:
                pygame.mixer.music.play(-1)
                pygame.mouse.set_visible(False)
                self.score = 0
                self.wrap_count = 1
                self.menu_on = False
        else:
            if event.type == pygame.MOUSEMOTION:
                self.spaceship.set_pos(pygame.mouse.get_pos())
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if self.wrap_count >0:
                    self.warp_count -= 1
                    self.warp_sound.play()
                    sleep(1)
                    self.rocks.empty()
        return True
    
    def run_logic(self, screen):
        occur_of_rocks = 1+self.score//500
        min_rock_speed = 1+self.score//400
        max_rocm_speed = 1+self.score//300

        if random.randint(1, self.occur_prob) == 1:
            



def resource_path(relative_path):
    try:
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)